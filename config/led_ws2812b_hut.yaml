substitutions:
  devicename: "led_ws2812b_hut"
  upper_devicename: "LED ws2812b Hut"

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini
  includes:
    - src/colorTempToRGB.h
    - src/HSL2RGB.h
    - src/starsLambda.h
    - src/addressableRoundEffects.h
    - led_ws2812b_hut_global_vars.h
  on_boot:
    then:
      #- light.turn_on: ${devicename}_WS2812b_Light
      - light.turn_on:
          id: WS2812b
# effect unten beim turn on handler einstellen!
#          effect: "starry sky"
#          effect: "color change"
#          brightness: 66%
          brightness: 30%

# disable ota + api
#<<: !include common/base.yaml

logger:

wifi:
#  ssid: !secret wifi_name
#  password: !secret wifi_pass
#  fast_connect:
#    on
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${upper_devicename}"
    password: huthuthut
#    manual_ip:
#      static_ip: 192.168.4.1
#      subnet: 255.255.255.0
#      gateway: 192.168.4.1
#      dns1: 192.168.4.1
    ap_timeout: 1s
  reboot_timeout: 0s

# 20210518 hatta mit esp8266 ned wolln => seite zum wlan auswählen
#captive_portal:

web_server:
#  local: True
  version: 1
  port: 80
  ota: false
  css_url: ""
  css_include: "_static/webserver-v1.min.css"
  js_include: "_static/webserver-v1.min.js"
# version 2
#  js_include: "_static/v2/www.js"
  js_url: ""

#api:
#  reboot_timeout: 0s

binary_sensor:
#  - !include common/base-binarysensor-status.yaml

sensor:
#  - !include common/base-sensor-wifi.yaml
#  - !include common/base-sensor-uptime.yaml
#  - !include common/base-sensor-vcc.yaml

switch:
#  - !include common/base-switch-reset.yaml

# LED bei dem im garten scheint was korrodiert zu sein
# output:
#   # Register the green LED as a dimmable output ....
#   - platform: esp8266_pwm
#     id: "${devicename}_led"
#     pin:
#       #number: GPIO13
#       number: GPIO02
#       inverted: True

globals:
  - id: effectSpeed
    type: int
    restore_value: True
    initial_value: '2'

number:
  - platform: template
    name: "Effect"
    min_value: 0
    max_value: 14
    step: 1
    lambda: |-
      ESP_LOGD("main", "Returning effect ********************************** %f ****************", id(effectSpeed));
      return id(effectSpeed);
    set_action:
      lambda: |-
        ESP_LOGD("main", "Setting effect ********************************** %f ****************", x);
        auto call = id(WS2812b).make_call();
        int effect=x;
        switch(effect) {
            case 0: call.set_effect("none"); break;
            case 1: call.set_effect("Random Twinkle 20%"); break;
            case 2: call.set_effect("Random Twinkle 80%"); break;
            case 3: call.set_effect("flash"); break;
            case 4: call.set_effect("Christmas RedGreenWhite"); break;
            case 5: call.set_effect("color change"); break;
            case 6: call.set_effect("random shift"); break;
            case 7: call.set_effect("starry sky"); break;
            case 8: call.set_effect("round color move"); break;
            case 9: call.set_effect("round color waves"); break;
            case 10: call.set_effect("round color waves blended"); break;
            case 11: call.set_effect("round color waves blended spin"); break;
            case 12: call.set_effect("round color rainbow spin"); break;
            case 13: call.set_effect("candles"); break;
            case 14: call.set_effect("flicker"); break;
        }
        call.perform();

  - platform: template
    name: "Effect Speed"
    min_value: 1
    max_value: 10
    step: 1
    lambda: |-
      ESP_LOGD("main", "Returning speed ********************************** %f ****************", id(effectSpeed));
      return id(effectSpeed);
    set_action:
      lambda: |-
        ESP_LOGD("main", "Setting speed ********************************** %f ****************", x);
        id(effectSpeed)=x;

  - platform: template
    name: "led brightness"
    min_value: 0
    max_value: 255
    step: 1
    lambda: |-
      int ret=id(WS2812b).current_values.get_brightness()*255;
      ESP_LOGD("main", "Returning brightness ********************************** %d ****************", ret);
      return ret;
    set_action:
      lambda: |-
        ESP_LOGD("main", "Setting brightness ********************************** %f ****************", x);
        auto call = id(WS2812b).make_call();
        call.set_brightness(x/255);
        call.perform();

light:
  # ... and then make a light out of it.
#  - platform: monochromatic
#    name: "${upper_devicename} Blue LED"
#    output: ${devicename}_led

  - platform: neopixelbus
    type: GRB
    variant: WS2811

#  - platform: fastled_clockless
#    chipset: WS2812b
    pin: D1
# led strip
    num_leds: 50
    #num_leds: 8
#    rgb_order: GRB
# WS2811 outdoor:
#    num_leds: 100
#    num_leds: 150
#    rgb_order: RGB
#    gamma_correct: 2
#    202209: mit gamma_correct: 1 ist der regenbogen viel schöner!
    gamma_correct: 1

    on_turn_on:
      - light.turn_on:
          id: WS2812b
#          effect: "starry sky"
          effect: "round color move"
#          red: 1
#          green: 0.75
#          blue: 0.2
#          effect: "color change"
#  - platform: neopixelbus
##    type: RGB
##    variant: WS2812X
#    variant: WS2812
##    pin: GPIO3
#    pin: GPIO2
#    num_leds: 8
##    method: ESP8266_DMA
#    method: ESP8266_UART1
##    rgb_order: BRG
    name: "$upper_devicename WS2812b Light"
    id: WS2812b
    <<: !include addressable_effects.yaml

status_led:
  pin:
    number: GPIO02
    #inverted: True
    inverted: False
  id: led_blue

