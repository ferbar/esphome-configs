substitutions:
  devicename: "audio32"
  upper_devicename: "Audio esp32"

esphome:
  name: $devicename
  platform: ESP32
  board: esp32dev
  #arduino_version: espressif8266@2.6.2
  #arduino_version: 2.5.2
  libraries:
    - esp8266Audio
      # SD esp8266, 1.2.4
#    - id=868
#    - ESP8266HTTPClient
  includes:
    - EsphomeAudio.h



<<: !include common/base.yaml

sensor:
  - !include common/base-sensor-wifi.yaml
  - !include common/base-sensor-uptime.yaml
  - !include common/base-sensor-vcc.yaml

output:
  # builtin LED
#  - platform: esp8266_pwm
#    id: "${devicename}_led"
#    pin:
#      number: GPIO02
#      inverted: True
#  # red LED
#  - platform: esp8266_pwm
#    id: keller_gang_red_led
#    pin:
#      number: GPIO15
#  # green LED
#  - platform: esp8266_pwm
#    id: keller_gang_green_led
#    pin:
#      number: GPIO12
#  # blue LED
#  - platform: esp8266_pwm
#    id: keller_gang_blue_led
#    pin:
#      number: GPIO13

light:
  # ... and then make a light out of it.
#  - platform: monochromatic
#    name: "${upper_devicename} builtin led light"
#    id: keller_gang_builtin_led_light
#    output: keller_gang_builtin_led
#  - platform: rgb
#    name: "${upper_devicename} RGB led"
#    #id: keller_gang_rgb_led
#    red: keller_gang_red_led
#    green: keller_gang_green_led
#    blue: keller_gang_blue_led

#switch:
  - platform: custom
#TODO: Template Number für volume, id(volume) an EsphomeAudio übergebem, mit add_on_state_callback() auf änderungen listen
    lambda: |-
      auto esphomeAudio = new EsphomeAudio();
      App.register_component(esphomeAudio);
      return {esphomeAudio};
##    turn_on_action:
##      - switch.turn_on: switch2
##    turn_off_action:
##      - switch.turn_on: switch1
    lights:
      - name: "Play Sound"

